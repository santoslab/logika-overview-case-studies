package org.sireum

import org.sireum._
import org.sireum.crypto._
import org.sireum.U8._
import org.sireum.test.TestSuite

// Adapted from https://github.com/brainhub/SHA3IUF

class SHA3Test extends TestSuite {

  // @formatter:off

  val v256_empty: ISZ[U8] = ISZ(
    u8"0xa7", u8"0xff", u8"0xc6", u8"0xf8", u8"0xbf", u8"0x1e", u8"0xd7", u8"0x66",
    u8"0x51", u8"0xc1", u8"0x47", u8"0x56", u8"0xa0", u8"0x61", u8"0xd6", u8"0x62",
    u8"0xf5", u8"0x80", u8"0xff", u8"0x4d", u8"0xe4", u8"0x3b", u8"0x49", u8"0xfa",
    u8"0x82", u8"0xd8", u8"0x0a", u8"0x4b", u8"0x80", u8"0xf8", u8"0x43", u8"0x4a"
  )

  val v256_0xa3_200_times: ISZ[U8] = ISZ(
    u8"0x79", u8"0xf3", u8"0x8a", u8"0xde", u8"0xc5", u8"0xc2", u8"0x03", u8"0x07",
    u8"0xa9", u8"0x8e", u8"0xf7", u8"0x6e", u8"0x83", u8"0x24", u8"0xaf", u8"0xbf",
    u8"0xd4", u8"0x6c", u8"0xfd", u8"0x81", u8"0xb2", u8"0x2e", u8"0x39", u8"0x73",
    u8"0xc6", u8"0x5f", u8"0xa1", u8"0xbd", u8"0x9d", u8"0xe3", u8"0x17", u8"0x87"
  )

  val v384_0xa3_200_times: ISZ[U8] = ISZ(
    u8"0x18", u8"0x81", u8"0xde", u8"0x2c", u8"0xa7", u8"0xe4", u8"0x1e", u8"0xf9",
    u8"0x5d", u8"0xc4", u8"0x73", u8"0x2b", u8"0x8f", u8"0x5f", u8"0x00", u8"0x2b",
    u8"0x18", u8"0x9c", u8"0xc1", u8"0xe4", u8"0x2b", u8"0x74", u8"0x16", u8"0x8e",
    u8"0xd1", u8"0x73", u8"0x26", u8"0x49", u8"0xce", u8"0x1d", u8"0xbc", u8"0xdd",
    u8"0x76", u8"0x19", u8"0x7a", u8"0x31", u8"0xfd", u8"0x55", u8"0xee", u8"0x98",
    u8"0x9f", u8"0x2d", u8"0x70", u8"0x50", u8"0xdd", u8"0x47", u8"0x3e", u8"0x8f"
  )

  val v512_0xa3_200_times = ISZ(
    u8"0xe7", u8"0x6d", u8"0xfa", u8"0xd2", u8"0x20", u8"0x84", u8"0xa8", u8"0xb1",
    u8"0x46", u8"0x7f", u8"0xcf", u8"0x2f", u8"0xfa", u8"0x58", u8"0x36", u8"0x1b",
    u8"0xec", u8"0x76", u8"0x28", u8"0xed", u8"0xf5", u8"0xf3", u8"0xfd", u8"0xc0",
    u8"0xe4", u8"0x80", u8"0x5d", u8"0xc4", u8"0x8c", u8"0xae", u8"0xec", u8"0xa8",
    u8"0x1b", u8"0x7c", u8"0x13", u8"0xc3", u8"0x0a", u8"0xdf", u8"0x52", u8"0xa3",
    u8"0x65", u8"0x95", u8"0x84", u8"0x73", u8"0x9a", u8"0x2d", u8"0xf4", u8"0x6b",
    u8"0xe5", u8"0x89", u8"0xc5", u8"0x1c", u8"0xa1", u8"0xa4", u8"0xa8", u8"0x41",
    u8"0x6d", u8"0xf6", u8"0x54", u8"0x5a", u8"0x1c", u8"0xe8", u8"0xba", u8"0x00"
  )

  // @formatter:on

  val tests = Tests {

    // @formatter:off
    * - {
      val sha3 = SHA3.init256
      assert(sha3.finalise() == v256_empty)
    }

    * - {
      val buf = ISZ.create(200, u8"0xa3")
      val sha3 = SHA3.init256
      sha3.update(buf)
      assert(sha3.finalise() == v256_0xa3_200_times)
    }

    * - {
      val buf = ISZ.create(100, u8"0xa3")
      val sha3 = SHA3.init256
      sha3.update(buf)
      sha3.update(buf)
      assert(sha3.finalise() == v256_0xa3_200_times)
    }

    * - {
      val buf = ISZ.create(1, u8"0xa3")
      val sha3 = SHA3.init256
      for (_ <- 0 until 200) {
        sha3.update(buf)
      }
      assert(sha3.finalise() == v256_0xa3_200_times)
    }

    * - {
      val buf = ISZ(
        u8"0xb7", u8"0x71", u8"0xd5", u8"0xce", u8"0xf5", u8"0xd1", u8"0xa4", u8"0x1a",
        u8"0x93", u8"0xd1", u8"0x56", u8"0x43", u8"0xd7", u8"0x18", u8"0x1d", u8"0x2a",
        u8"0x2e", u8"0xf0", u8"0xa8", u8"0xe8", u8"0x4d", u8"0x91", u8"0x81", u8"0x2f",
        u8"0x20", u8"0xed", u8"0x21", u8"0xf1", u8"0x47", u8"0xbe", u8"0xf7", u8"0x32",
        u8"0xbf", u8"0x3a", u8"0x60", u8"0xef", u8"0x40", u8"0x67", u8"0xc3", u8"0x73",
        u8"0x4b", u8"0x85", u8"0xbc", u8"0x8c", u8"0xd4", u8"0x71", u8"0x78", u8"0x0f",
        u8"0x10", u8"0xdc", u8"0x9e", u8"0x82", u8"0x91", u8"0xb5", u8"0x83", u8"0x39",
        u8"0xa6", u8"0x77", u8"0xb9", u8"0x60", u8"0x21", u8"0x8f", u8"0x71", u8"0xe7",
        u8"0x93", u8"0xf2", u8"0x79", u8"0x7a", u8"0xea", u8"0x34", u8"0x94", u8"0x06",
        u8"0x51", u8"0x28", u8"0x29", u8"0x06", u8"0x5d", u8"0x37", u8"0xbb", u8"0x55",
        u8"0xea", u8"0x79", u8"0x6f", u8"0xa4", u8"0xf5", u8"0x6f", u8"0xd8", u8"0x89",
        u8"0x6b", u8"0x49", u8"0xb2", u8"0xcd", u8"0x19", u8"0xb4", u8"0x32", u8"0x15",
        u8"0xad", u8"0x96", u8"0x7c", u8"0x71", u8"0x2b", u8"0x24", u8"0xe5", u8"0x03",
        u8"0x2d", u8"0x06", u8"0x52", u8"0x32", u8"0xe0", u8"0x2c", u8"0x12", u8"0x74",
        u8"0x09", u8"0xd2", u8"0xed", u8"0x41", u8"0x46", u8"0xb9", u8"0xd7", u8"0x5d",
        u8"0x76", u8"0x3d", u8"0x52", u8"0xdb", u8"0x98", u8"0xd9", u8"0x49", u8"0xd3",
        u8"0xb0", u8"0xfe", u8"0xd6", u8"0xa8", u8"0x05", u8"0x2f", u8"0xbb"
      )
      val sha3 = SHA3.init256
      sha3.update(buf)
      assert(sha3.finalise() == ISZ(
        u8"0xa1", u8"0x9e", u8"0xee", u8"0x92", u8"0xbb", u8"0x20", u8"0x97", u8"0xb6",
        u8"0x4e", u8"0x82", u8"0x3d", u8"0x59", u8"0x77", u8"0x98", u8"0xaa", u8"0x18",
        u8"0xbe", u8"0x9b", u8"0x7c", u8"0x73", u8"0x6b", u8"0x80", u8"0x59", u8"0xab",
        u8"0xfd", u8"0x67", u8"0x79", u8"0xac", u8"0x35", u8"0xac", u8"0x81", u8"0xb5"
      ))
    }

    * - {
      val buf = ISZ.create(200, u8"0xa3")
      val sha3 = SHA3.init384
      sha3.update(buf)
      assert(sha3.finalise() == v384_0xa3_200_times)
    }

    * - {
      val buf = ISZ.create(100, u8"0xa3")
      val sha3 = SHA3.init384
      sha3.update(buf)
      sha3.update(buf)
      assert(sha3.finalise() == v384_0xa3_200_times)
    }

    * - {
      val buf = ISZ.create(1, u8"0xa3")
      val sha3 = SHA3.init384
      for (_ <- 0 until 200) {
        sha3.update(buf)
      }
      assert(sha3.finalise() == v384_0xa3_200_times)
    }

    * - {
      val buf = ISZ.create(200, u8"0xa3")
      val sha3 = SHA3.init512
      sha3.update(buf)
      assert(sha3.finalise() == v512_0xa3_200_times)
    }

    * - {
      val buf = ISZ.create(100, u8"0xa3")
      val sha3 = SHA3.init512
      sha3.update(buf)
      sha3.update(buf)
      assert(sha3.finalise() == v512_0xa3_200_times)
    }

    * - {
      val buf = ISZ.create(1, u8"0xa3")
      val sha3 = SHA3.init512
      for (_ <- 0 until 200) {
        sha3.update(buf)
      }
      assert(sha3.finalise() == v512_0xa3_200_times)
    }
  }
}
